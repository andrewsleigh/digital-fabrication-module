<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.4">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-11-25T16:52:12+01:00</updated><id>http://localhost:4000/</id><title type="html">Digital Fabrication Module</title><subtitle>Work-in-progress and draft course notes for a module in digital fabrication at University of Brighton, based on Fab Academy</subtitle><entry><title type="html">Publishing to multiple servers</title><link href="http://localhost:4000/colophon/publishing-to-multiple-servers.html" rel="alternate" type="text/html" title="Publishing to multiple servers" /><published>2018-11-24T00:00:00+01:00</published><updated>2018-11-24T00:00:00+01:00</updated><id>http://localhost:4000/colophon/publishing-to-multiple-servers</id><content type="html" xml:base="http://localhost:4000/colophon/publishing-to-multiple-servers.html">&lt;p&gt;Publishing this content to GitHub, GitHub Pages and my own server.
&lt;!--more--&gt;&lt;/p&gt;

&lt;p&gt;I use quite a complex system to draft and publish these notes. This is an adaptation of &lt;a href=&quot;http://fab.academany.org/2018/labs/fablabbrighton/students/andrew-sleigh/assignments/2018/01/18/wk2-git-and-website.html&quot;&gt;a system I first used for my Fab Academy documentation, detailed here&lt;/a&gt;. While fiddly to set up, it means I can write notes and share them with minimum friction, and maximum portability.&lt;/p&gt;

&lt;h2 id=&quot;my-requirements&quot;&gt;My requirements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Quickly take notes on WIP and write rough drafts without having to worry about publishing&lt;/li&gt;
  &lt;li&gt;Use basic formatting and images without resorting to a complex word-processor (ie. Markdown)&lt;/li&gt;
  &lt;li&gt;Selectively publish/share some of this content&lt;/li&gt;
  &lt;li&gt;Easily create a navigable flat HTML website that I can publish to my own domain&lt;/li&gt;
  &lt;li&gt;Share some WIP with collaborators on GitHub&lt;/li&gt;
  &lt;li&gt;Publish navigable HTML version on GitHub Pages&lt;/li&gt;
  &lt;li&gt;Combine drafting and publishing workflows with as few extra steps as possible&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This is a more complex set of requirements than I used for Fab Academy, where I also used Jekyll to support a Markdown to flat-HTML drafting and publishing workflow. In that case, I was publishing HTML only (not Markdown), and only to one site. The publishing workflow there was simply a case of building the site to my local Git repository, then pushing that to the remote repo. The only complexity was that the URLs for my development server (localhost) and the live server were different. I handled this by using variables in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file, and generating the files for local testing with an override for these live server URLs.&lt;/p&gt;

&lt;h2 id=&quot;drafting&quot;&gt;Drafting&lt;/h2&gt;
&lt;p&gt;I’m currently using Bear (a Mac/iOS Markdown editor) for drafting notes) because it has great Markdown support and elegantly hides all the complexity. It has a pretty good Markdown export, the only problem being it hard-codes image links in a way that won’t work for my live sites. I may just switch to writing Markdown directly in a publishable format, using BBEdit (a text-only editor).&lt;/p&gt;

&lt;p&gt;Drafting in an app like this introduces a break in the process, which has the downside of introducing a divergence as soon as I export a note to a Markdown file. From this point on, I have to treat the Markdown file in my Jekyll directory as the canonical note.&lt;/p&gt;

&lt;h2 id=&quot;exporting-markdown&quot;&gt;Exporting Markdown&lt;/h2&gt;
&lt;p&gt;When an idea is solid enough to become a piece of content, I export the Bear note to a Markdown file in my Git repo.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-configuration&quot;&gt;Jekyll configuration&lt;/h2&gt;
&lt;p&gt;I set up the Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file to support publishing to GitHub Pages. I can’t control the Markdown-to-HTML conversion in this process, so it just needs to work by default. So I set up the URL variables like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url: “https://andrewsleigh.github.io” # the base hostname &amp;amp; protocol for your site
baseurl: “/digital-fabrication-module” # the subpath of your site
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Jekyll can support multiple config files, so I created a second one, detailed below, to override these settings when publishing to my own site.&lt;/p&gt;

&lt;h2 id=&quot;jekyll-build-and-serve-variants&quot;&gt;Jekyll build and serve variants&lt;/h2&gt;
&lt;p&gt;Make sure we’re in the right directory first!
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /Users/Andrew/Documents/GitHub/digital-fabrication-module&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Update: I decided to move the non-code content to a /docs folder, so I’m now serving Jekyll locally from &lt;code class=&quot;highlighter-rouge&quot;&gt;/Users/andrew/Documents/GitHub/digital-fabrication-module/docs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then, depending on what I’m trying to do, I can use different versions of the Jekyll command to generate the site:&lt;/p&gt;

&lt;h3 id=&quot;pushing-to-the-remote-repo-on-github-and-publishing-to-github-pages&quot;&gt;Pushing to the remote repo on GitHub and publishing to GitHub Pages&lt;/h3&gt;
&lt;p&gt;No Jekyll build needed as I’m pushing Markdown files to GitHub, not HTML!&lt;/p&gt;

&lt;h3 id=&quot;serving-the-site-for-local-testing&quot;&gt;Serving the site for local testing&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve --baseurl ''&lt;/code&gt;
This generates the static HTML files indie a &lt;code class=&quot;highlighter-rouge&quot;&gt;_site/&lt;/code&gt; directory, which is then served from &lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt;
This also auto-regenerates the site with every change.&lt;/p&gt;

&lt;h3 id=&quot;building-the-site-for-deploying-to-my-live-server&quot;&gt;Building the site for deploying to my live server&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll build --destination _site-ascom/ --config _config.yml,_config-ascom.yml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This builds the site (without auto-regeneration) to a folder, &lt;code class=&quot;highlighter-rouge&quot;&gt;_site-ascom/&lt;/code&gt; and it uses the &lt;code class=&quot;highlighter-rouge&quot;&gt;--config&lt;/code&gt; option to read from two configuration files. The first is the main &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt; file which has all the basic options set for the site, including &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl&lt;/code&gt; as mentioned above.&lt;/p&gt;

&lt;p&gt;The second has only two lines, and overrides these settings with ones appropriate for hosting on my site:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;url: &quot;https://andrewsleigh.com&quot;   
baseurl: &quot;/learning/digital-fabrication-module&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;filepaths&quot;&gt;Filepaths&lt;/h2&gt;
&lt;p&gt;In general, Jekyll is set up to use relative file paths, and these work fine, so long as the site is built or served using the appropriate options as above.&lt;/p&gt;

&lt;h2 id=&quot;image-paths&quot;&gt;Image paths&lt;/h2&gt;
&lt;p&gt;This is how I include an image in a Markdown file. (&lt;code class=&quot;highlighter-rouge&quot;&gt;assets/&lt;/code&gt; is a directory at the root level of my Jekyll site.)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;![laser-printer-driver-dialog.jpg](/assets/laser-printer-driver-dialog.jpg)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;On GitHub Pages, this renders as:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;/digital-fabrication-module/assets/laser-printer-driver-dialog.jpg&quot; alt=&quot;laser-printer-driver-dialog.jpg&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On my localhost, when serving with &lt;code class=&quot;highlighter-rouge&quot;&gt;baseurl ‘’&lt;/code&gt;, it renders as:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=“/assets/laser-printer-driver-dialog.jpg” alt=“laser-printer-driver-dialog.jpg” /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;On my live site, when building with &lt;code class=&quot;highlighter-rouge&quot;&gt;--config _config.yml,_config-ascom.yml&lt;/code&gt;:
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;img src=&quot;/learning/digital-fabrication-module/assets/laser-printer-driver-dialog.jpg&quot; alt=&quot;laser-printer-driver-dialog.jpg&quot; /&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;h2 id=&quot;publishing-and-version-control&quot;&gt;Publishing and version control&lt;/h2&gt;
&lt;p&gt;This Jekyll directory is a Git repo on my own development machine. Jekyll can build the site and serve it locally from  &lt;a href=&quot;http://127.0.0.1:4000&quot;&gt;http://127.0.0.1:4000&lt;/a&gt;. I can also publish it to my three public destinations:&lt;/p&gt;

&lt;h3 id=&quot;1-github&quot;&gt;1. GitHub&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/andrewsleigh/digital-fabrication-module&quot;&gt;https://github.com/andrewsleigh/digital-fabrication-module&lt;/a&gt;
This is the home for Markdown files and other assets I would like others to contribute to or adapt themselves.
I can just push changes to the GitHub repo to share them publicly.&lt;/p&gt;

&lt;h4 id=&quot;a-note-on-gitignore&quot;&gt;A note on Gitignore&lt;/h4&gt;

&lt;p&gt;The local repo has two folders of static HTML files that don’t need to be synced with GitHub (or indeed controlled with Git locally). So I created a &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitignore&lt;/code&gt; file at the root of this repo to exclude these two folders from Git:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/_site/
/_site-ascom/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Actually removing them from the Git repo is a bit more fiddly, since they had already been included in previous commits. &lt;a href=&quot;https://stackoverflow.com/questions/7927230/remove-directory-from-remote-repository-after-adding-them-to-gitignore&quot;&gt;StackOverflow to the rescue&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The rules in your .gitignore file only apply to untracked files. Since the files under that directory were already committed in your repository, you have to unstage them, create a commit, and push that to GitHub:&lt;/p&gt;
  &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rm -r --cached some-directory  
git commit -m ‘Remove the now ignored directory “some-directory”’  
git push origin master  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;  &lt;/div&gt;
&lt;/blockquote&gt;

&lt;p&gt;In my case:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rm -r --cached _site-ascom
git commit -m 'Remove the now ignored directory &quot;_site-ascom&quot;'
git push origin master

git rm -r --cached _site
git commit -m 'Remove the now ignored directory &quot;_site&quot;'
git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This worked, so I added a few more entries to hide some other superfluous files from the public repo:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;/Gemfile
/Gemfile.lock
**/.DS_Store
/.sass-cache
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;**/.DS_Store&lt;/code&gt; should match macOS’s &lt;code class=&quot;highlighter-rouge&quot;&gt;.DS_Store&lt;/code&gt; files whichever directory they’re in.&lt;/p&gt;

&lt;p&gt;And then I followed the same procedure to remove these already-committed files from the repo.&lt;/p&gt;

&lt;h3 id=&quot;2-github-pages&quot;&gt;2. GitHub Pages&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://andrewsleigh.github.io/digital-fabrication-module&quot;&gt;https://andrewsleigh.github.io/digital-fabrication-module&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I use the &lt;a href=&quot;https://pages.github.com&quot;&gt;built-in GitHub Pages tool&lt;/a&gt; to publish these Markdown files to a normal HTML website, also using Jekyll. You can do this without setting your repo as a Jekyll instance, but as I want to create an HTML site myself anyway, &lt;a href=&quot;https://help.github.com/articles/using-jekyll-as-a-static-site-generator-with-github-pages/&quot;&gt;this is a lot easier&lt;/a&gt;, and I can control the design of the site using the same config settings and templates.&lt;/p&gt;

&lt;p&gt;‘Publishing’ is automatic once setup, and changes are regenerated on the live GitHub Pages site after every push to the GitHub repo.&lt;/p&gt;

&lt;h3 id=&quot;3-my-own-site&quot;&gt;3. My own site&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;https://andrewsleigh.com/learning/digital-fabrication-module/&quot;&gt;https://andrewsleigh.com/learning/digital-fabrication-module/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I want to maintain a copy of the site at a  URL I control. I don’t have any syncing tools set up with my web host, so periodically, I just use SFTP to sync the &lt;code class=&quot;highlighter-rouge&quot;&gt;/_site-ascom&lt;/code&gt; directory with the &lt;code class=&quot;highlighter-rouge&quot;&gt;/learning/digital-fabrication-module/&lt;/code&gt; directory on my site.&lt;/p&gt;</content><author><name></name></author><summary type="html">Publishing this content to GitHub, GitHub Pages and my own server.</summary></entry><entry><title type="html">File structure</title><link href="http://localhost:4000/colophon/file-structure.html" rel="alternate" type="text/html" title="File structure" /><published>2018-11-24T00:00:00+01:00</published><updated>2018-11-24T00:00:00+01:00</updated><id>http://localhost:4000/colophon/file-structure</id><content type="html" xml:base="http://localhost:4000/colophon/file-structure.html">&lt;!--more--&gt;

&lt;h3 id=&quot;git-repo&quot;&gt;Git repo&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Root&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Digital Fabrication Module/&lt;/code&gt;
Lives at https://github.com/andrewsleigh/digital-fabrication-module on GitHub&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Docs&lt;/em&gt; 
&lt;code class=&quot;highlighter-rouge&quot;&gt;Digital Fabrication Module/docs&lt;/code&gt;
Generate the static site to this folder using Jekyll and push to GitHub with other files, so they can be seen there too. This folder will be a mirror of https://andrewsleigh.com/learning/digital-fabrication-module&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Posts or Pages?&lt;/em&gt;
e.g. my DIY Arduino notes. Should these be published as /posts/ in a blog format, e.g. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;docs/_posts/2018-11-17-diyardiuno.md&lt;/code&gt;
Or as root level /&lt;a href=&quot;https://jekyllrb.com/docs/pages/&quot;&gt;pages&lt;/a&gt;/ within the docs folder, e.g. 
&lt;code class=&quot;highlighter-rouge&quot;&gt;docs/diyardiuno.md&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;From https://jekyllrb.com/docs/pages/&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;If you have a lot of pages, you can organize them into subfolders. The same subfolders that are used to group your pages in our project’s source will exist in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_site&lt;/code&gt; folder when your site builds.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Project or assignment resources, e.g&lt;/em&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;Digital Fabrication Module/DIYArduino&lt;/code&gt;
Code or assets for specific assignments or projects&lt;/p&gt;

&lt;p&gt;Or should these live inside &lt;code class=&quot;highlighter-rouge&quot;&gt;docs&lt;/code&gt;?&lt;/p&gt;

&lt;h2 id=&quot;trying-jekyll&quot;&gt;Trying Jekyll&lt;/h2&gt;
&lt;h3 id=&quot;setup&quot;&gt;Setup&lt;/h3&gt;

&lt;p&gt;Go to folder
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd /Users/Andrew/Dropbox/Work/Digital\ Fabrication\ Methods/Website&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Create new Jekyll site, assuming it will live within a docs folder (This can be mirrored within a git repo):
&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll new docs&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go into that new folder:
&lt;code class=&quot;highlighter-rouge&quot;&gt;cd docs/&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Run the Jekyll &lt;code class=&quot;highlighter-rouge&quot;&gt;serve&lt;/code&gt; command:
&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Go to the dev site:
http://127.0.0.1:4000/&lt;/p&gt;

&lt;p&gt;Try adding some sample content as pages inside folders&lt;/p&gt;

&lt;p&gt;Think I need to add hierarchy using /collections/: https://jekyllrb.com/docs/collections/&lt;/p&gt;

&lt;p&gt;Add this to _config.yml&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;collections:
 - diy-arduino
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add my sample posts to the &lt;code class=&quot;highlighter-rouge&quot;&gt;diy-arduino/&lt;/code&gt; folder
Rerun the serve command&lt;/p&gt;

&lt;p&gt;Can’t get this to work, so also tried using a category setup, which also didn’t work (possibly because its set up for posts, not pages)&lt;/p&gt;

&lt;p&gt;2 options:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Follow these instructions for collections: https://ben.balter.com/2015/02/20/jekyll-collections/&lt;/li&gt;
  &lt;li&gt;Or these (Which I think I did for my podcast posts): https://kylewbanks.com/blog/creating-category-pages-in-jekyll-without-plugins&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Think 1 is the most logical way to go…&lt;/p&gt;

&lt;p&gt;Nope - can’t get that to work. Alternative method:&lt;/p&gt;

&lt;p&gt;Change permalinks for posts to remove dates:
Add this line to config.yml:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: /:categories/:title:output_ext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This removes dates from the default format, which is:
&lt;code class=&quot;highlighter-rouge&quot;&gt;permalink: /:categories/:year/:month/:day/:title:output_ext&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Then implement category pages as per https://kylewbanks.com/blog/creating-category-pages-in-jekyll-without-plugins&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;OK, so final setup&lt;/p&gt;

&lt;p&gt;Write all docs as dated posts, and store in the root level _posts/ folder&lt;br /&gt;
Use the permalinks setting to remove dates from post URLs
Assign categories to posts, so they can be grouped, as per the standard &lt;a href=&quot;https://jekyllrb.com/docs/posts/#categories-and-tags&quot;&gt;Jekyll docs for categories&lt;/a&gt;
Add a category.html page in _layouts/ which will be the template for listing all posts within a category – an index template for a category&lt;/p&gt;
&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&amp;gt;

{% for page in site.categories[page.category]  %}
    &amp;lt;h3&amp;gt;&amp;lt;a href=&quot;{{ page.url | relative_url }}&quot;&amp;gt;
      {{ page.title }}
    &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&amp;gt;
     &amp;lt;p&amp;gt;{{ page.excerpt }} &amp;lt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add a similar home.html page in _layouts/ which will override the default homepage template to list all posts by category:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
  &amp;lt;h3&amp;gt;{{ category[0] }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&amp;gt;
  &amp;lt;ul&amp;gt;
    {% for post in category[1] %}
      &amp;lt;li&amp;gt;&amp;lt;a href=&quot;{{ post.url }}&quot;&amp;gt;{{ post.title }}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;
    {% endfor %}
  &amp;lt;/u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Add a simple page for each category inside the category/ folder. These all have the same format:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
layout: category
title: DIY Arduino
category: diy-arduino
---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Don’t use collections, or pages, or store pages in special folders. Remove these from the site or any special commands from the config.yml file&lt;/p&gt;

&lt;h2 id=&quot;a-few-notes-on-markdown-and-jekyll&quot;&gt;A few notes on Markdown (and Jekyll)&lt;/h2&gt;

&lt;p&gt;Markdown is great, but it has a few quirks worth noting. These can be made more irksome when wrapping your Markdown in Jekyll’s ‘liquid’ syntax.&lt;/p&gt;

&lt;h3 id=&quot;line-breaks&quot;&gt;Line breaks&lt;/h3&gt;
&lt;p&gt;In these notes, I’m writing a lot of sentence fragments, so I need to use a lot of line break – as opposed to paragraphs. &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax#p&quot;&gt;These have a special syntax&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The implication of the “one or more consecutive lines of text” rule is that Markdown supports “hard-wrapped” text paragraphs. This differs significantly from most other text-to-HTML formatters which translate every line break character in a paragraph into a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; tag.
When you &lt;em&gt;do&lt;/em&gt; want to insert a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; break tag using Markdown, you end a line with two or more spaces, then type return.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spaces-in-category-names&quot;&gt;Spaces in category names&lt;/h3&gt;
&lt;p&gt;If you want categories that have more than one word, you need to encapsulate them with [square brackets], like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;categories: [DIY Arduino]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html"></summary></entry><entry><title type="html">Week 3: Laser cutter: computer-controlled cutting (CNC)</title><link href="http://localhost:4000/course/course-week-3-computer-controlled-cutting.html" rel="alternate" type="text/html" title="Week 3: Laser cutter: computer-controlled cutting (CNC)" /><published>2018-11-23T00:00:00+01:00</published><updated>2018-11-23T00:00:00+01:00</updated><id>http://localhost:4000/course/course-week-3-computer-controlled-cutting</id><content type="html" xml:base="http://localhost:4000/course/course-week-3-computer-controlled-cutting.html">&lt;p&gt;Introducing the laser cutter and 2D-3D assembly.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;sources&quot;&gt;Sources&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Course content derived from Fab Academy: &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/index.html&quot;&gt;http://academy.cba.mit.edu/classes/computer_cutting/index.html&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Neil’s lecture from 2018 (Fab-20180207D_Lesson03): &lt;a href=&quot;http://fab.academany.org/2018/lectures/fab-20180207.html&quot;&gt;Fab Academy 20180207 Recordings&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;assignment&quot;&gt;Assignment&lt;/h2&gt;

&lt;h3 id=&quot;group-assignment&quot;&gt;Group assignment&lt;/h3&gt;

&lt;p&gt;Characterise your lasercutter, making test part(s) that vary cutting settings and dimensions
Make test cuts, vary power, speed and frequency for different materials. Document settings for different materials and thicknesses
Make kerf tests to find good settings for different materials. Use these results for your own (parametric) design&lt;/p&gt;

&lt;!-- Do we need a group assignment? Is it feasible to do? --&gt;

&lt;h3 id=&quot;individual-assignment&quot;&gt;Individual assignment&lt;/h3&gt;

&lt;p&gt;Design, lasercut, and document a parametric  &lt;a href=&quot;http://fab.cba.mit.edu/classes/863.12/people/salzberg/week2.html&quot;&gt;press-fit construction kit&lt;/a&gt;, accounting for the lasercutter kerf, which can be assembled in multiple ways&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;an-overview-of-cnc-cutting-tools&quot;&gt;An overview of CNC cutting tools&lt;/h2&gt;

&lt;p&gt;In this module, we’re going to focus on the laser cutter (optionally also the vinyl cutter)&lt;/p&gt;

&lt;h3 id=&quot;knife&quot;&gt;Knife&lt;/h3&gt;

&lt;p&gt;Vinyl cutters - under-utilised tools in Fablabs. e.g.&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.rolanddga.com/products/vinyl-cutters&quot;&gt;Roland&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.zund.com/&quot;&gt;Zund&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=PG9lJOnNTzQ&quot;&gt;Othercutter&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.honda-el.co.jp/en/industry&quot;&gt;ultrasonic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;laser&quot;&gt;Laser&lt;/h3&gt;
&lt;p&gt;Most used machine in the lab&lt;br /&gt;
Huge spectrum of capability:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.lightcon.com/Product/PHAROS.html&quot;&gt;PHAROS&lt;/a&gt;  - “disassembles material on an atomic scale, lets you do laser cutting down to microns”  / $100k&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.epiloglaser.com/product_line.htm&quot;&gt;Epilog&lt;/a&gt;    - we have a Helix  / £10k&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://fslaser.com/&quot;&gt;Full Spectrum&lt;/a&gt;  Hobbyist lasers / $1k&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;plasma&quot;&gt;Plasma&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://forestscientific.com/cnc-plasma-cutters&quot;&gt;Forest Scientific&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://torchmate.com/&quot;&gt;Torchmate&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;waterjet&quot;&gt;Waterjet&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.omax.com/&quot;&gt;OMAX&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.flowwaterjet.com/&quot;&gt;Flow&lt;/a&gt; – Can cut anything / $100k / Uses consumables - you must add new garnet, and remove garnet sludge&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.wazer.com/&quot;&gt;WAZER&lt;/a&gt;   - a kickstarter project, becoming more accessible&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;hot-wire&quot;&gt;Hot wire&lt;/h3&gt;

&lt;p&gt;Killer app: architectural decoration and special effects in foam.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.3dcutting.com/solutions/frogwire.html&quot;&gt;FROGWire&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.hotwiresystems.com/hot-wire-cnc-foam-cutters&quot;&gt;Hotwire&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://ng.cba.mit.edu/show/video/14.08.modular.mp4&quot;&gt;MTM&lt;/a&gt; Good candidate for a DIY project: just need two positional ends and a resistive wire&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;computer-aided-design-cad-software&quot;&gt;Computer Aided Design (CAD) software&lt;/h2&gt;

&lt;h3 id=&quot;we-use&quot;&gt;We use&lt;/h3&gt;

&lt;p&gt;Mostly &lt;strong&gt;Fusion360, Rhino, Solidworks&lt;/strong&gt; for 3D; &lt;strong&gt;Illustrator or Inkscape&lt;/strong&gt; for 2D&lt;/p&gt;

&lt;h3 id=&quot;others&quot;&gt;Others&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.inkscape.org/&quot;&gt;Inkscape&lt;/a&gt; &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_design/inkscape.mp4&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.rhino3d.com/&quot;&gt;Rhino&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.grasshopper3d.com/&quot;&gt;Grasshopper&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=mZ_1jC2FrnY&amp;amp;t=2s&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.blender.org/&quot;&gt;Blender&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://nikitron.cc.ua/sverch/html/main.html&quot;&gt;Sverchok&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecadweb.org/&quot;&gt;FreeCAD&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.freecadweb.org/wiki/Sketcher_Workbench&quot;&gt;Sketcher&lt;/a&gt; &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_design/freecadsketch.mp4&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.autodesk.com/products/fusion-360/overview&quot;&gt;Fusion 360&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://apps.autodesk.com/FUSION/en/Detail/Index?id=8699194120463301363&amp;amp;os=Win64&amp;amp;appLang=en&quot;&gt;Slicer&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.solidworks.com/&quot;&gt;SolidWorks&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://xdesign.solidworks.com/&quot;&gt;xDesign&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.onshape.com/&quot;&gt;Onshape&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://appstore.onshape.com/apps/CAM/EAAEWYIOMQKBENEMYW2N7MF253CT4WYL6SUJGEY=/description&quot;&gt;Kiri:Moto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/mkeeter/antimony&quot;&gt;Antimony&lt;/a&gt;  &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_design/antimony.mp4&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.tamasoft.co.jp/pepakura-en/&quot;&gt;Pepakura&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://hci.rwth-aachen.de/visicut&quot;&gt;VisiCut&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://flatfab.com/&quot;&gt;flatfab&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.exactflat.com/&quot;&gt;ExactFlat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://mods.cba.mit.edu/?program=programs/frep/gears&quot;&gt;mods&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;parametric-design&quot;&gt;Parametric design&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cardboard comes in different thicknesses&lt;/li&gt;
  &lt;li&gt;Lasers cut with different kerfs&lt;/li&gt;
  &lt;li&gt;Human bodies come in different shapes and sizes&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Inkscape is not parametric, Rhino and Fusion 360 are.&lt;/p&gt;

&lt;h2 id=&quot;computer-aided-manufacturing-cam&quot;&gt;Computer Aided Manufacturing (&lt;a href=&quot;https://en.wikipedia.org/wiki/Computer-aided_manufacturing&quot;&gt;CAM&lt;/a&gt;)&lt;/h2&gt;

&lt;p&gt;CAD is design, CAM translates a design file into a format the machine understands and communicates with the machine.&lt;/p&gt;

&lt;p&gt;Typically through printer driver (accessible in Print dialog on your 2D CAD software)&lt;br /&gt;
But we can also talk to the mchine at a lower level using &lt;a href=&quot;http://fabmodules.org&quot;&gt;Fab Modules&lt;/a&gt; or Mods&lt;/p&gt;

&lt;h2 id=&quot;the-laser-cutter&quot;&gt;The Laser cutter&lt;/h2&gt;

&lt;h3 id=&quot;applications&quot;&gt;Applications&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cutting or marking/engraving by varying power&lt;/li&gt;
  &lt;li&gt;Raster or &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/gray.jpg&quot;&gt;vector&lt;/a&gt; mode&lt;/li&gt;
  &lt;li&gt;Screen printing, by making a &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/halftone.jpg&quot;&gt;halftone&lt;/a&gt; (See &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/holes.jpg&quot;&gt;holes&lt;/a&gt;, &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/halftone.png&quot;&gt;path&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;Press-fit construction (example: &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/gik.jpg&quot;&gt;GIK&lt;/a&gt;, &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/gik.cad&quot;&gt;gik.cad&lt;/a&gt;, &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/gik.png&quot;&gt;gik.png&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;joints&quot;&gt;Joints&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/joints.jpg&quot;&gt;Examples&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Easy to design &amp;lt;–&amp;gt; Strongest properties&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Slot - simplest, hard to align&lt;/li&gt;
  &lt;li&gt;Chamfer - rounded corners help align parts, and can compress materials into slots (eg corrugated cardboard). But still relies on sliding friction&lt;/li&gt;
  &lt;li&gt;Bistable (bump and slot), behaves very differetly for different materials&lt;/li&gt;
  &lt;li&gt;Flexure - design a bendable part with controllable flex&lt;/li&gt;
  &lt;li&gt;Pinned - secure joint with an orthogonal constraint (see also &lt;a href=&quot;https://www.canadianwoodworking.com/tipstechniques/wedged-mortise-tenon&quot;&gt;wedged mortise and tenon&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;tolerances&quot;&gt;Tolerances&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Slop vs security (range is about 0.1mm)&lt;/li&gt;
  &lt;li&gt;Brittle material vs compressible material&lt;/li&gt;
  &lt;li&gt;Parametric design is your friend&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;3d-shapes&quot;&gt;3D shapes&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Kerfing (incomplete cut)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/flexures.png&quot;&gt;Flexures, living hinges&lt;/a&gt; (enables twists and bends). See also &lt;a href=&quot;https://inkscape.org/~drphonon/★living-hinge-creator&quot;&gt;Inkscape living hinge extension&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Extreme example, a &lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/56836505.pdf&quot;&gt;moving platform&lt;/a&gt; without moving parts (gears, bearings)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;lasers-light-amplification-by-stimulated-emission-of-radiation&quot;&gt;Lasers (&lt;em&gt;Light Amplification by Stimulated Emission of Radiation&lt;/em&gt;)&lt;/h3&gt;

&lt;p&gt;See Neil’s lecture (@ 45 mins) for technical details&lt;br /&gt;
CO&lt;sub&gt;2&lt;/sub&gt; laser: good for wood, card, acrylic, etc. Need a fiber laser to cut metal.&lt;/p&gt;

&lt;h3 id=&quot;cutting-mechanisms&quot;&gt;Cutting mechanisms&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;burning&lt;/li&gt;
  &lt;li&gt;melting&lt;/li&gt;
  &lt;li&gt;evaporation&lt;/li&gt;
  &lt;li&gt;ablation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The material has to go somewhere, …&lt;/p&gt;

&lt;h3 id=&quot;airflow&quot;&gt;Airflow&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Exhaust - draws combustible material out. (Machine: Extractor)&lt;/li&gt;
  &lt;li&gt;Assist - injects air at the cutting point. (Machine: Compressor)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If it’s not strong enough, that material stays around - Bad news&lt;br /&gt;
You shouldn’t see smoke hanging around in laser cutting chamber&lt;br /&gt;
Exhaust fumes are very bad news.&lt;br /&gt;
Plastic will outgas for a minute after cutting. Leave the lid closed for a minute&lt;/p&gt;

&lt;h3 id=&quot;kerf&quot;&gt;Kerf&lt;/h3&gt;

&lt;p&gt;Some material is removed with the cut.&lt;br /&gt;
Some drivers (e.g. mods) allow for this, with offsetting.&lt;br /&gt;
Otherwise, you should allow for this in your design (parametrically!)&lt;/p&gt;

&lt;h3 id=&quot;safety&quot;&gt;Safety&lt;/h3&gt;
&lt;p&gt;&lt;a href=&quot;http://academy.cba.mit.edu/classes/computer_cutting/fire.jpg&quot;&gt;All laser cutters want to catch on fire&lt;/a&gt; &lt;br /&gt;
Card, MDF, plywood and acrylic are all really close to combusting when cutting.&lt;br /&gt;
Don’t step away from the machine. Always supervise.&lt;br /&gt;
Initial combustion: open the lid. Otherwise, smother or use the fire extinguisher.
&lt;strong&gt;check&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id=&quot;materials&quot;&gt;Materials&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Cardboard - the good stuff bows, not kinks. Use old boxes. Very forgiving for joints&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.towerhobbies.com/cgi-bin/wti0091p?&amp;amp;P=ML&amp;amp;C=RCC&amp;amp;V=RMX&amp;amp;D=Revell-Wood---Plywood&quot;&gt;Plywood&lt;/a&gt; - Real thickness != real thickness - use the callipers.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.mcmaster.com/#acrylic/=1bgkrkx&quot;&gt;PMMA/acrylic/plexiglass/perspex/lucite&lt;/a&gt;   &lt;a href=&quot;https://www.mcmaster.com/#standard-acrylic-glue/=1bgkitd&quot;&gt;glue&lt;/a&gt;   &lt;a href=&quot;https://makezine.com/2013/02/06/workshop-wednesday-heat-bending-acrylic-enclosures&quot;&gt;bend&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.mcmaster.com/#acetal-homopolymer-sheets&quot;&gt;POM/delrin/acetal&lt;/a&gt; - more elastic than acrylic&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;no-gos&quot;&gt;No-gos&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;No PVC - releases chlorine&lt;/li&gt;
  &lt;li&gt;Never put a material into the cutter unless you know where it came from - no random plastic.&lt;/li&gt;
  &lt;li&gt;Never put anything shiny into a CO&lt;sub&gt;2&lt;/sub&gt; laser (e.g. metal)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Laser optics need to be kept clean (by who?)&lt;/p&gt;

&lt;h3 id=&quot;settings&quot;&gt;Settings&lt;/h3&gt;

&lt;p&gt;(See laser printer driver dialog.)
&lt;img src=&quot;/assets/laser-printer-driver-dialog.jpg&quot; alt=&quot;laser-printer-driver-dialog.jpg&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Power - too much melts, too little doesn’t cut. Use multiple passes.&lt;/li&gt;
  &lt;li&gt;Speed - too slow can cause combustion, too slow doesn’t cut&lt;/li&gt;
  &lt;li&gt;Pulse rate/Frequency - too close can melt, too far apart can leave gaps&lt;/li&gt;
  &lt;li&gt;Coordinate system, origin is top left&lt;/li&gt;
  &lt;li&gt;Vector mode for cutting, raster mode for engraving (but interesting grey areas for experimentation)&lt;/li&gt;
&lt;/ul&gt;</content><author><name></name></author><summary type="html">Introducing the laser cutter and 2D-3D assembly.</summary></entry><entry><title type="html">Jekyll configuration and customisation</title><link href="http://localhost:4000/colophon/jekyll-setup.html" rel="alternate" type="text/html" title="Jekyll configuration and customisation" /><published>2018-11-17T00:00:00+01:00</published><updated>2018-11-17T00:00:00+01:00</updated><id>http://localhost:4000/colophon/jekyll-setup</id><content type="html" xml:base="http://localhost:4000/colophon/jekyll-setup.html">&lt;p&gt;Adapting Jekyll to make it work for this site.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;content-structure&quot;&gt;Content structure&lt;/h2&gt;

&lt;p&gt;I tried a few ways to build a hierarchy of content within Jekyll, since this site doesn’t really follow a (reverse-chronological) blog format. Specifically, writing all content as pages instead of posts, and using the Jekyll’s concept of “&lt;a href=&quot;https://jekyllrb.com/docs/collections/&quot;&gt;collections&lt;/a&gt;”. Neither of these worked, so I’ve ended up with the following approach.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Write all content as posts. i.e. use the standard &lt;code class=&quot;highlighter-rouge&quot;&gt;date-name.md&lt;/code&gt; file naming format, and store them in the &lt;code class=&quot;highlighter-rouge&quot;&gt;/_posts/&lt;/code&gt; directory.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Give all posts &lt;a href=&quot;https://jekyllrb.com/docs/posts/#categories-and-tags&quot;&gt;categories&lt;/a&gt;, by including this in the frontmatter at the top of each post, like so:&lt;/p&gt;

    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 layout: post
 title:  &quot;Jekyll configuration and customisation&quot;
 date:   2018-11-17
 categories: colophon
 ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;Or:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; categories: [colophon, course]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;span class=&quot;wip&quot;&gt;WIP:&lt;/span&gt; Note that categories must be URL-friendly (lowercase, one-word, or hyphenated), as they are used in post slugs. This causes problems later on when you want to list category names in templates.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Override the default permalink settings to use categories as part of the URL slug, instead of dates (this makes the whole site a lot less &lt;em&gt;bloggy&lt;/em&gt;.)&lt;/p&gt;

    &lt;p&gt;Add this line to &lt;code class=&quot;highlighter-rouge&quot;&gt;_config.yml&lt;/code&gt;:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; permalink: /:categories/:title:output_ext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This removes dates from the default format, which is:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; permalink: /:categories/:year/:month/:day/:title:output_ext
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Create index pages for categories by adding a &lt;code class=&quot;highlighter-rouge&quot;&gt;category.html&lt;/code&gt; page to &lt;code class=&quot;highlighter-rouge&quot;&gt;/_layouts/&lt;/code&gt;.&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;category&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&amp;gt;

 {% for page in site.categories[page.category]  %}
     &amp;lt;h3&amp;gt;&amp;lt;a href=&quot;{{ page.url | relative_url }}&quot;&amp;gt;
       {{ page.title }}
     &amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&amp;gt;
      &amp;lt;p&amp;gt;{{ page.excerpt }} &amp;lt;/&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/ul&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;a href=&quot;https://jekyllrb.com/docs/themes/#overriding-theme-defaults&quot;&gt;Override the default homepage template&lt;/a&gt; by creating a similar &lt;code class=&quot;highlighter-rouge&quot;&gt;home.html&lt;/code&gt; template in &lt;code class=&quot;highlighter-rouge&quot;&gt;/_layouts/&lt;/code&gt; to list all posts by category.&lt;/p&gt;

    &lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; &lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;ss&quot;&gt;layout: &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;---&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% for &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;category&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;site&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;categories&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%}
   &amp;lt;h3&amp;gt;{{ category[0] }&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h3&amp;gt;
   &amp;lt;ul&amp;gt;
     {% for post in category[1] %}
       &amp;lt;li&amp;gt;&amp;lt;a href=&quot;{{ post.url }}&quot;&amp;gt;{{ post.title }}&amp;lt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/li&amp;gt;
     {% endfor %}
   &amp;lt;/u&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% endfor &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;&lt;span class=&quot;wip&quot;&gt;WIP:&lt;/span&gt; This is where the category naming breaks down. I need to find a way to associate a properly formated category name with each machine-readable category lug to display on this page.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Add a simple template for each category inside the &lt;code class=&quot;highlighter-rouge&quot;&gt;/category/&lt;/code&gt; folder. These all have the same format:&lt;/p&gt;
    &lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; ---
 layout: category
 title: Course notes
 category: course
 ---
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;This step is derived from &lt;a href=&quot;https://kylewbanks.com/blog/creating-category-pages-in-jekyll-without-plugins&quot;&gt;a similar approach detailed here&lt;/a&gt;.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, all posts appear listed by category on the homepage, and in the site nav, all categories are listed, linked through to their respective index pages&lt;/p&gt;

&lt;h2 id=&quot;overrides&quot;&gt;Overrides&lt;/h2&gt;

&lt;p&gt;URL-based overrides are &lt;a href=&quot;/colophon/publishing-to-multiple-servers.html&quot;&gt;detailed elsewhere&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I’ve already talked about permalink settings.&lt;/p&gt;

&lt;p&gt;So far, my only other customisation is to explicitly state an excerpt separator, so that I can control how posts are displayed on index pages.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;excerpt_separator: &amp;lt;!--more--&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;If a post has nothing above this separator, nothing is displayed as an except. However, all posts must have the separator, otherwise an indeterminate amount of text is considered by Jekyll to be the excerpt.&lt;/p&gt;

&lt;h3 id=&quot;permalinks&quot;&gt;Permalinks&lt;/h3&gt;

&lt;h2 id=&quot;css&quot;&gt;CSS&lt;/h2&gt;

&lt;p&gt;I should try SASS!&lt;/p&gt;

&lt;h2 id=&quot;a-few-notes-on-markdown-and-jekyll&quot;&gt;A few notes on Markdown (and Jekyll)&lt;/h2&gt;

&lt;p&gt;Markdown is great, but it has a few quirks worth noting. These can be made more irksome when wrapping your Markdown in Jekyll’s ‘liquid’ syntax.&lt;/p&gt;

&lt;h3 id=&quot;line-breaks&quot;&gt;Line breaks&lt;/h3&gt;
&lt;p&gt;In these notes, I’m writing a lot of sentence fragments, so I need to use a lot of line breaks – as opposed to paragraphs. &lt;a href=&quot;https://daringfireball.net/projects/markdown/syntax#p&quot;&gt;These have a special syntax&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The implication of the “one or more consecutive lines of text” rule is that Markdown supports “hard-wrapped” text paragraphs. This differs significantly from most other text-to-HTML formatters which translate every line break character in a paragraph into a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; tag.
When you &lt;em&gt;do&lt;/em&gt; want to insert a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;br /&amp;gt;&lt;/code&gt; break tag using Markdown, you end a line with two or more spaces, then type return.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;spaces-in-category-names&quot;&gt;Spaces in category names&lt;/h3&gt;
&lt;p&gt;If you want categories that have more than one word, you need to encapsulate them with [square brackets], like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;categories: [DIY Arduino]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name></name></author><summary type="html">Adapting Jekyll to make it work for this site.</summary></entry></feed>